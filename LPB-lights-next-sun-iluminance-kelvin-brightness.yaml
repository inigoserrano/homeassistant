blueprint:
  name: LPB - Lights of next room management with day/night iluminance, temperature and brightness
  description: XXXXX Turn lights on and off with iluminance, brightness and diferents temperature of color depending of the sun (day/night).
  domain: automation
  input:
    target_light:
      name: Lights
      description: The lights to keep in sync.
      selector:
        entity:
          domain: light
    area_state:
      name: Area state
      selector:
        entity:
          domain: input_select
    next_area_state:
      name: Next area state
      selector:
        entity:
          domain: input_select
    iluminance_sensor:
      name: Iluminance
      description: The iluminance sensor.
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    iluminance_limit:
      name: Iluminance limit
      description: Iluminance limit to turn on the lights.
      default: 100
      selector:
        number:
          min: 0
          max: 500.0
          mode: slider
          step: 10.0
    brightness_day:
      name: Brightness of the light during the day
      description: Brightness of the light when turning on in the day, the sun is 'above_horizon'.
      default: 50
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: "%"
    kelvin_day:
      name: Kelvin temperature of the light during the day
      description: Kelvin temperature of the light when turning on in the day, the sun is 'above_horizon'.
      default: 4000
      selector:
        number:
          min: 2000.0
          max: 5500.0
          mode: slider
          step: 100.0
    brightness_night:
      name: Brightness of the light during the night
      description: Brightness of the light when turning on in the night, the sun is 'below_horizon'.
      default: 50
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: "%"
    kelvin_night:
      name: Kelvin temperature of the light during the night
      description: Kelvin temperature of the light when turning on in the night, the sun is 'below_horizon'.
      default: 2700
      selector:
        number:
          min: 2000.0
          max: 5500.0
          mode: slider
          step: 100.0
mode: parallel
max_exceeded: silent
trigger:
  - platform: state
    entity_id: !input "area_state"
  - platform: state
    entity_id: !input "next_area_state"
action:
  - variables:
      area_input_select: !input "area_state"
      the_target_light: !input "target_light"
      next_area_input_select: !input "next_area_state"
      area_occupied: "{{ is_state(area_input_select, 'Checking entry')
        or is_state(area_input_select, 'Occupied')
        or is_state(area_input_select, 'Occupied and closed')
        or is_state(area_input_select, 'Occupied and open')
        or is_state(area_input_select, 'Checking occupancy')
        or is_state(area_input_select, 'Checking occupancy by closure')
        or is_state(area_input_select, 'Checking occupancy by opening') }}"
      area_not_occupied: "{{ not area_occupied }}"
      next_area_occupied: "{{ is_state(next_area_input_select, 'Checking entry')
        or is_state(next_area_input_select, 'Occupied')
        or is_state(next_area_input_select, 'Occupied and closed')
        or is_state(next_area_input_select, 'Occupied and open')
        or is_state(area_input_select, 'Checking occupancy')
        or is_state(next_area_input_select, 'Checking occupancy by closure')
        or is_state(next_area_input_select, 'Checking occupancy by opening') }}"
      next_area_not_occupied: "{{ not next_area_occupied }}"
  - choose:
      # Turn off the lights if both are not occupied
      - conditions:
          - "{{ area_not_occupied and next_area_not_occupied }}"
        sequence:
          - service: light.turn_off
            data:
              entity_id: !input target_light
      # Turn off the lights if main is occupied and the next is not occupied and its enought light
      - conditions:
          - "{{ area_occupied and next_area_not_occupied }}"
          - condition: numeric_state
            entity_id: !input "iluminance_sensor"
            above: !input "iluminance_limit"
        sequence:
          - service: light.turn_off
            data:
              entity_id: !input target_light
      # Turn off the lights if main is occupied and the next is not occupied and its enought light
      - conditions:
          - "{{ area_occupied and next_area_not_occupied }}"
          - condition: numeric_state
            entity_id: !input "iluminance_sensor"
            below: !input "iluminance_limit"
        sequence:
          # Turn on the lights with parametrization
          - choose:
              - conditions:
                  - condition: state
                    entity_id: sun.sun
                    state: "above_horizon"
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: !input target_light
                      brightness_pct: !input brightness_day
                      kelvin: !input kelvin_day
            default:
              - service: light.turn_on
                data:
                  entity_id: !input target_light
                  brightness_pct: !input brightness_night
                  kelvin: !input kelvin_night
      # Do nothing if main is not occupied and next is occupied (next room has turn on the light)
      # Do nothing if main is occupied and next is occupied (next room has turn on the light)
