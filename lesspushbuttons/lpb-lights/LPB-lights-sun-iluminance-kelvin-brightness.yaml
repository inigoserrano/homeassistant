blueprint:
  name: LPB - Lights management with day/night temperature and brightness
  description: Turn lights on and off with brightness and diferents temperature of color depending of the sun (day/night).
  domain: automation
  input:
    target_light:
      name: Lights
      description: The lights to keep in sync.
      selector:
        entity:
          domain: light
    area_state:
      name: Area state
      selector:
        entity:
          domain: input_select
    brightness_day:
      name: Brightness of the light during the day
      description: Brightness of the light when turning on in the day, the sun is 'above_horizon'.
      default: 50
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: "%"
    kelvin_day:
      name: Kelvin temperature of the light during the day
      description: Kelvin temperature of the light when turning on in the day, the sun is 'above_horizon'.
      default: 4000
      selector:
        number:
          min: 2000.0
          max: 5500.0
          mode: slider
          step: 100.0
    brightness_night:
      name: Brightness of the light during the night
      description: Brightness of the light when turning on in the night, the sun is 'below_horizon'.
      default: 50
      selector:
        number:
          min: 0.0
          max: 100.0
          mode: slider
          step: 1.0
          unit_of_measurement: "%"
    kelvin_night:
      name: Kelvin temperature of the light during the night
      description: Kelvin temperature of the light when turning on in the night, the sun is 'below_horizon'.
      default: 2700
      selector:
        number:
          min: 2000.0
          max: 5500.0
          mode: slider
          step: 100.0
mode: parallel
trigger:
  - platform: state
    entity_id: !input "area_state"
action:
  - variables:
      area_input_select: !input "area_state"
  - choose:
      # Turn off the lights
      - conditions:
          - "{{ is_state(area_input_select, 'Not occupied and closed')
            or is_state(area_input_select, 'Not occupied and open')
            or is_state(area_input_select, 'Not occupied') }}"
        sequence:
          - service: light.turn_off
            data:
              entity_id: !input target_light
      # Turn on the lights with parametrization
      - conditions:
          - "{{ is_state(area_input_select, 'Checking entry')
            or is_state(area_input_select, 'Occupied') }}"
        sequence:
          - choose:
              - conditions:
                  - condition: state
                    entity_id: sun.sun
                    state: "above_horizon"
                sequence:
                  - service: light.turn_on
                    data:
                      entity_id: !input target_light
                      brightness_pct: !input brightness_day
                      kelvin: !input kelvin_day
            default:
              - service: light.turn_on
                data:
                  entity_id: !input target_light
                  brightness_pct: !input brightness_night
                  kelvin: !input kelvin_night
    # The rest is only turn on the light
    default:
      - service: light.turn_on
        data:
          entity_id: !input target_light
