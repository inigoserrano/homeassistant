blueprint:
  name: LPB - Checks the state of room occupancy controlled by a door sensor and a occupancy sensor
  description: '
  
  This blueprint checks the state of occupancy of one room using one door sensor and a occupancy sensor.

  '
  domain: automation
  input:
    occupancy_sensor:
      name: Occupancy Sensor
      description: The occupancy sensor in the room.
      selector:
        entity:
          domain: binary_sensor
          device_class: occupancy
    door_sensor:
      name: Door Sensor
      description: The door sensor of the entrance door to the room.
      selector:
        entity:
          domain: binary_sensor
          device_class: opening
    area_state:
      name: Area state
      description: 'Input select that handles the area state.'
      selector:
        entity:
          domain: input_select
    checking_delay:
      name: Checking occupancy timeout
      description: Seconds to check if occupancy is detected.
      default: 15
      selector:
        number:
          min: 0
          max: 3600
          unit_of_measurement: seconds
mode: parallel
trigger:
  - platform: homeassistant
    event: start
action:
  - variables:
      occupancy_sensor_id: !input "occupancy_sensor"
      door_entity_id: !input "door_sensor"
      area_input_select: !input "area_state"

      door_open: "{{ trigger.entity_id == door_entity_id and trigger.to_state.state == 'on' }}"
      door_closed: "{{ not door_open }}"
      state_door_open: "{{ is_state(area_input_select, 'Not occupied and open') or is_state(area_input_select, 'Occupied and open') }}"
      state_door_closed: "{{ is_state(area_input_select, 'Not occupied and closed') or is_state(area_input_select, 'Occupied and closed') }}"

      occupancy_sensor_occupied: "{{ is_state(occupancy_sensor_id, 'on') }}"
      occupancy_sensor_not_occupied: "{{ not occupancy_sensor_occupied }}"
      state_sensor_occupied: "{{ is_state(area_input_select, 'Occupied and closed') or is_state(area_input_select, 'Occupied and open') }}"
      state_sensor_not_occupied: "{{ is_state(area_input_select, 'Not occupied and closed') or is_state(area_input_select, 'Not occupied and open') }}"

  - choose:
      - conditions:
          - "{{ (door_open and state_door_closed) or (door_closed and state_door_open) }}"
          - "{{ (occupancy_sensor_occupied and state_sensor_not_occupied) or (occupancy_sensor_not_occupied and state_sensor_occupied) }}"
        sequence:
          - service: input_select.select_option
            data:
              entity_id: !input "area_state"
              option: Checking entry
      